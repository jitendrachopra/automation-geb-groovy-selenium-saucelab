import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["chrome","safari","firefox","ie"]//, "phantomJs","ie","safari""firefox",chrome

    ext {
        groovyVersion = '2.4.1'
        gebVersion = '0.12.2'
        seleniumVersion = '2.46.0'
        chromeDriverVersion = '2.19'
        phantomJsVersion = '1.9.7'
    }
}

apply plugin: "groovy"
apply from: "gradle/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    mavenCentral()
    maven { url "http://repository-saucelabs.forge.cloudbees.com/release" }
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile 'org.apache.poi:poi:3.13'
    testCompile 'org.apache.poi:poi-ooxml:3.13'
    testCompile 'org.apache.poi:ooxml-schemas:1.1'
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile 'org.apache.ant:ant:1.8.2'

    testCompile "org.seleniumhq.selenium:selenium-safari-driver:2.48.0"
    testCompile group: 'org.springframework', name: 'spring-core', version: '4.1.6.RELEASE'
    testCompile group: 'org.springframework', name: 'spring-context', version: '4.1.6.RELEASE'
    testCompile(group: 'org.springframework', name: 'spring-test', version: '4.1.6.RELEASE') {
        exclude(module: 'commons-logging')
    }
    testCompile "com.saucelabs:sauce-connect:3.0.28"
    testCompile "org.yaml:snakeyaml:1.16"
    testCompile "org.springframework.boot:spring-boot:1.3.0.RELEASE"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile ("com.saucelabs:ci-sauce:1.104") {
        transitive = false
    }
    testCompile "commons-io:commons-io:1.4"
    testCompile "commons-lang:commons-lang:2.6"

    // using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
    testCompile("com.codeborne:phantomjsdriver:1.2.1") {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
}
//if you want to run on selenium grid/SauceLab/Cross browser Testing provide below information
def automationCredentials = [
        username: "",
        apiKey: ""
]
def automationUrl="http://${automationCredentials.username}:${automationCredentials.apiKey}@ondemand.saucelabs.com:80/wd/hub"

//to run on local
/*
def automationCredentials = [
        username: "",
        apiKey: ""
]
*/


drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
        systemProperty 'automationCredentials.username', automationCredentials.username
        if ( project.hasProperty("profile") ) {
            def a = project.getProperties().get("profile").toString();
            systemProperty "profile", a
        }
        systemProperty 'automationCredentials.apiKey', automationCredentials.apiKey
        systemProperty 'automationURL', automationUrl

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

/*phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}*/

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

apply from: "gradle/ci.gradle"
